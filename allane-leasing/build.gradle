plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.openapi.generator' version '6.2.1'
}

group = 'com.allane.leasing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.7'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
  	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.0'
	// ToDo: use testcontainers for integration tests
	// implementation 'org.testcontainers:mariadb:1.17.6'
	// testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
	compileOnly('org.projectlombok:lombok')
	annotationProcessor('org.projectlombok:lombok')
	testCompileOnly('org.projectlombok:lombok')
	testAnnotationProcessor('org.projectlombok:lombok')
}

tasks.named('test') {
	useJUnitPlatform()
    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
		afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
	}
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/../leasing.yaml".toString()
    outputDir = "$buildDir/generate-sources".toString()
    apiPackage = "${group}.api"
    modelPackage = "${group}.model"
    configOptions = [
        interfaceOnly: "true"
    ]
}

def copyGeneratedSources = tasks.register("copyGeneratedSources", Copy) {
    from("templates")
    into(layout.buildDirectory.dir("${openApiGenerate.outputDir.get()}/src/main/java"))
}

sourceSets {
    main {
        java {
            srcDir(copyGeneratedSources)
        }
    }
}
